from PyQt6 import QtCore, QtWidgets, QtGui, uic
from PyQt6.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QDialog
from PyQt6.QtGui import QIcon, QFont
from PyQt6.QtCore import Qt
import sys
import os
import darkdetect
from DBManager import DBManager


class AppContext:
    """Manages database connection for the application."""
    def __init__(self):
        self.db_manager = DBManager()
        self.connection = self.db_manager.connect()

    def __del__(self):
        self.db_manager.close()


class MedicineInformation_w(QDialog):
    """Dialog window to display detailed information about a medicine."""
    def __init__(self, context, medicine_id):
        super(MedicineInformation_w, self).__init__()
        self.context = context
        self.medicine_id_value = medicine_id

        # Load UI
        ui_path = os.path.join(current_dir, 'ui', 'medicine_information.ui')
        print(f">>> medicine_information.ui path: {ui_path}")
        if not os.path.exists(ui_path):
            raise FileNotFoundError(f"Không tìm thấy UI file: {ui_path}")
        uic.loadUi(ui_path, self)

        # Set window properties
        self.setWindowTitle("Medicine Information")
        self.setWindowIcon(QIcon(icon_path))

        # Load data
        self.load_medicine_data(self.medicine_id_value)
        
    def load_medicine_data(self, medicine_id_value):
        """Load and display medicine data from database."""
        try:
            db = self.context.db_manager
            sql = """SELECT m.medicine_id, m.medicine_name, c.category_name, m.created_at, m.updated_at
                        FROM medicine m
                        JOIN category c ON m.category_id = c.category_id
                        """
            db.execute(sql, (medicine_id_value,))
            result = db.fetchone()

            if result:
                self.medicine_name.setText(result[0] if result[0] else "")
                self.medicine_category.setText(result[1] if result[1] else "")
                self.created_at.setText(str(result[2]) if result[2] else "")
                self.updated_at.setText(str(result[3]) if result[3] else "")
            else:
                print(f"No data found for medicine ID: {medicine_id_value}")

        except Exception as e:
            print(f"Lỗi khi tải dữ liệu thuốc: {e}")


class Medicine_w(QMainWindow):
    """Main window for medicine management."""
    def __init__(self, context):
        super(Medicine_w, self).__init__()
        self.context = context

        # Load UI
        ui_path = os.path.join(current_dir, 'ui', 'medicine.ui')
        print(f">>> medicine.ui path: {ui_path}")
        if not os.path.exists(ui_path):
            raise FileNotFoundError(f"Không tìm thấy UI file: {ui_path}")
        uic.loadUi(ui_path, self)

        # Set window properties
        self.setWindowTitle("Medicine Management")
        self.setWindowIcon(QIcon(icon_path))

        # Connect signals
        self.tableWidget.cellClicked.connect(self.handle_cell_click)
        self.tableWidget.setSortingEnabled(True)


        # Load initial data
        self.load_medicine_data()

    def load_medicine_data(self):
        """Load and display medicine data in the table."""
        try:
            sql = """
                SELECT m.medicine_id, m.medicine_name, c.category_name, m.created_at, m.updated_at
                FROM medicine m
                JOIN category c ON m.category_id = c.category_id
            """
            cursor = self.context.db_manager.execute(sql)
            results = cursor.fetchall()

            if not results:
                print("No medicine data found")
                return

            # Setup table
            self.tableWidget.setRowCount(len(results))
            column_count = len(cursor.description) + 1  # +1 for "View Details" column
            self.tableWidget.setColumnCount(column_count)

            self.tableWidget.setHorizontalHeaderLabels([
                "ID", "Name", "Category", "Created At", "Updated At", "Details"
            ])

            # Set column widths
            self.tableWidget.setColumnWidth(0, 50)
            self.tableWidget.setColumnWidth(1, 200)
            self.tableWidget.setColumnWidth(2, 150)
            self.tableWidget.setColumnWidth(3, 150)
            self.tableWidget.setColumnWidth(4, 150)
            self.tableWidget.setColumnWidth(5, 150)

            # Populate table
            for row_idx, row_data in enumerate(results):
                medicine_id = row_data[0]

                for col_idx in range(column_count):
                    if col_idx < len(row_data):
                        value = row_data[col_idx]
                        item = QTableWidgetItem()

                        if col_idx == 0:
                            item.setData(Qt.ItemDataRole.DisplayRole, int(value))
                            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                        else:
                            item.setText(str(value))
                            if col_idx in [1, 2]:  # Name, Category
                                font = QFont()
                                item.setFont(font)
                                item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                                item.setToolTip("Click để xem chi tiết thuốc")
                                item.setData(Qt.ItemDataRole.UserRole, medicine_id)

                        self.tableWidget.setItem(row_idx, col_idx, item)
                    else:
                        # "View Details" column
                        detail_item = QTableWidgetItem("View Details")
                        font = QFont()
                        font.setUnderline(True)
                        detail_item.setFont(font)
                        detail_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                        detail_item.setData(Qt.ItemDataRole.UserRole, medicine_id)
                        detail_item.setToolTip("Click để xem chi tiết thuốc")
                        self.tableWidget.setItem(row_idx, col_idx, detail_item)

            # ✅ Enable sorting after all data is loaded
            self.tableWidget.setSortingEnabled(True)

        except Exception as e:
            print(f"Lỗi khi tải dữ liệu thuốc: {e}")



    def show_medicine_detail(self, medicine_id):
        """Open medicine detail dialog."""
        detail_dialog = MedicineInformation_w(self.context, medicine_id)
        detail_dialog.exec()

    def handle_cell_click(self, row, column):
        """Handle click events on table cells."""
        # Open details when clicking on name or "View Details" column
        if column == 1 or column == 5:
            item = self.tableWidget.item(row, column)
            if item is None:
                print("Item not found")
                return

            medicine_id = item.data(Qt.ItemDataRole.UserRole)
            if medicine_id:
                print(f"Opening details for medicine ID: {medicine_id}")
                self.show_medicine_detail(medicine_id)
# Program entry point
if __name__ == '__main__':
    # Set up paths
    current_dir = os.path.dirname(os.path.abspath(__file__))
    icon_dir = os.path.join(current_dir, "icon")
    icon_file = "app_icon_dark.png" if darkdetect.isDark() else "app_icon_light.png"
    icon_path = os.path.join(icon_dir, icon_file)

    # Initialize application
    context = AppContext()
    app = QApplication(sys.argv)
    medicine_window = Medicine_w(context)
    medicine_window.show()

    # Run application
    sys.exit(app.exec())