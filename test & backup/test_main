from PyQt6 import QtCore, QtWidgets, QtGui, uic
from PyQt6.QtWidgets import *
from PyQt6.uic import loadUi
from PyQt6.QtGui import QIcon
from PyQt6.QtCore import Qt
import sys
import MySQLdb as mysql_db
from DBManager import DBManager
import os
import darkdetect

# Path management
current_dir = os.path.dirname(os.path.abspath(__file__))  

def iconset():
    icon_dir = os.path.join(current_dir, "icon")
    if darkdetect.isDark():
        icon_path = os.path.join(icon_dir, "app_icon_dark.png")
    else:
        icon_path = os.path.join(icon_dir, "app_icon_light.png")
    return icon_path

icon_path = iconset()

# Connect to DataBase
class AppContext:
    def __init__(self):
        self.db_manager = DBManager()
        self.connection = self.db_manager.connect()
        self.cursor = self.connection.cursor

# Main Window
class Main_w(QMainWindow):  
    def __init__(self, context, staff_id=None):
        super(Main_w, self).__init__()
        self.context = context
        ui_path = os.path.join(current_dir, 'ui', 'main.ui')
        print(">>> main.ui path:", ui_path)
        if not os.path.exists(ui_path):
            raise FileNotFoundError(f"Không tìm thấy UI file: {ui_path}")
        uic.loadUi(ui_path, self)
        self.setWindowTitle("MediManager")
        self.setWindowIcon(QtGui.QIcon(icon_path))
        self.staff_id = staff_id
        self.setAttribute(Qt.WidgetAttribute.WA_DeleteOnClose)

        # Connect action for each menu
        self.actionSupplier.triggered.connect(self.goto_supplier)
        self.actionMedicine.triggered.connect(self.goto_medicine)
        self.actionStock.triggered.connect(self.goto_stock)
        self.actionCustomer.triggered.connect(self.goto_customer)
        self.actionStaff.triggered.connect(self.goto_staff)
        self.actionLog_out.triggered.connect(self.goto_login)

    def closeEvent(self, event):
        QApplication.quit()

    def goto_login(self):
        self.login_window = Login_w(self.context)
        self.login_window.show()
        self.hide()

    def goto_supplier(self):
        self.supplier_window = Supplier_w(self.context)
        self.supplier_window.show()
        self.hide()

    def goto_medicine(self):
        self.medicine_window = Medicine_w(self.context)
        self.medicine_window.show()
        self.hide()

    def goto_customer(self):
        self.customer_window = Customer_w(self.context)
        self.customer_window.show()
        self.hide()

    def goto_stock(self):
        self.stock_window = Stock_w(self.context)
        self.stock_window.show()
        self.hide()

    def goto_staff(self):
        self.staff_window = Staff_w(self.context)
        self.staff_window.show()
        self.hide()

    def goto_invoice(self):
        self.invoice_window = Invoice_w(self.context)
        self.invoice_window.show()
        self.hide()

# Supplier Window
class Supplier_w(QMainWindow):
    def __init__(self, context):
        super(Supplier_w, self).__init__()
        self.context = context
        ui_path = os.path.join(current_dir, 'ui', 'supplier.ui')
        print(">>> supplier.ui path:", ui_path)
        if not os.path.exists(ui_path):
            raise FileNotFoundError(f"Không tìm thấy UI file: {ui_path}")
        uic.loadUi(ui_path, self)
        self.setWindowTitle("Supplier Management")
        self.setWindowIcon(QtGui.QIcon(icon_path))
        # Lấy cursor và connection từ context
        cursor = self.context.connection.cursor()
        cursor.execute("SELECT * FROM suppliers")
        results = cursor.fetchall()

        self.tableWidget.setRowCount(len(results))
        self.tableWidget.setColumnCount(len(cursor.description))
        self.tableWidget.setHorizontalHeaderLabels([col[0] for col in cursor.description])

        for row_idx, row_data in enumerate(results):
            for col_idx, value in enumerate(row_data):
                self.tableWidget.setItem(row_idx, col_idx, QtWidgets.QTableWidgetItem(str(value)))

        cursor.close()

        # Đưa dữ liệu vào TableWidget
        for row_idx, row_data in enumerate(results):
            for col_idx, value in enumerate(row_data):
                self.tableWidget.setItem(row_idx, col_idx, QtWidgets.QTableWidgetItem(str(value)))

        cursor.close()
        conn.close()
    

    def save_supplier_data(self):
        supplier_name = self.lineEdit_Supplier_Name.text()
        contact_person = self.lineEdit_Contact_Person.text()
        phone_number = self.lineEdit_Phone_Number.text()
        address = self.textEdit_Address.toPlainText()

        sql_query = f"INSERT INTO suppliers (name, contact_person, phone_number, address) VALUES ('{supplier_name}', '{contact_person}', '{phone_number}', '{address}')"
        self.context.cursor.execute(sql_query)
        self.context.connection.commit()

    def goto_staff(self):
        self.staff_window = Staff_w(self.context)
        self.staff_window.show()
        self.hide()

    def goto_customer(self):
        self.customer_window = Customer_w(self.context)
        self.customer_window.show()
        self.hide()

if __name__ == '__main__':
    context = AppContext()
    app = QApplication(sys.argv)
    main_window = Main_w(context)
    main_window.show()
    sys.exit(app.exec())
