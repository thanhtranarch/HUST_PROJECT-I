from PyQt6 import QtCore, QtWidgets, QtGui, uic
from PyQt6.QtWidgets import *
from PyQt6.QtGui import QIcon, QFont
from PyQt6.QtCore import Qt
import sys
import os
import darkdetect
from DBManager import DBManager


class AppContext:
    """Manages database connection for the application."""
    def __init__(self):
        self.db_manager = DBManager()
        self.connection = self.db_manager.connect()

    def __del__(self):
        self.db_manager.close()


# Supplier Window - Done
class Supplier_w(QMainWindow):
    def __init__(self, context):
        super(Supplier_w, self).__init__()
        self.context = context
        ui_path = os.path.join(current_dir, 'ui', 'supplier.ui')
        print(">>> supplier.ui path:", ui_path)
        if not os.path.exists(ui_path):
            raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y UI file: {ui_path}")
        uic.loadUi(ui_path, self)
        self.setWindowTitle("Supplier Management")
        self.setWindowIcon(QtGui.QIcon(icon_path))
        self.load_supplier_data()
        self.back_button.clicked.connect(self.goto_main)
        self.tableWidget.setSortingEnabled(True)
        self.search_input.textChanged.connect(self.search_supplier)

    def load_supplier_data(self):
        try:
            db = self.context.db_manager
            sql= """SELECT supplier_id, supplier_name, created_at, updated_at FROM supplier"""
            db.execute(sql)
            results = db.fetchall()

            # C·∫≠p nh·∫≠t TableWidget
            self.tableWidget.setRowCount(len(results))
            self.tableWidget.setColumnCount(len(db.execute(sql).description)+1)
            # self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableWidget.setColumnHidden(0, True)
            self.tableWidget.setColumnWidth(1, 300)  
            self.tableWidget.setColumnWidth(2, 150) 
            self.tableWidget.setColumnWidth(3, 150) 
            self.tableWidget.setColumnWidth(4, 200) 
            self.tableWidget.cellClicked.connect(self.handle_cell_click)

            column_count = self.tableWidget.columnCount()

            for row_idx, row_data in enumerate(results):
                supplier_id = row_data[0]  # Gi·ªØ l·∫°i ƒë·ªÉ d√πng UserRole

                for col_idx in range(column_count):
                    if col_idx < len(row_data):
                        value = row_data[col_idx]
                        item = QTableWidgetItem(str(value))

                        # Supplier Name (hi·ªÉn th·ªã v·ªõi underline)
                        if col_idx == 1:
                            font = QFont()
                            font.setBold(True)
                            font.setUnderline(True)
                            item.setFont(font)
                            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                            item.setToolTip("Click ƒë·ªÉ xem chi ti·∫øt nh√† cung c·∫•p")
                            item.setData(Qt.ItemDataRole.UserRole, supplier_id)

                        elif col_idx == 0:
                            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)

                        self.tableWidget.setItem(row_idx, col_idx, item)

                    else:
                        # C·ªôt "View Details"
                        detail_item = QTableWidgetItem("View Details")
                        font = QFont()
                        font.setUnderline(True)
                        detail_item.setFont(font)
                        detail_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                        detail_item.setData(Qt.ItemDataRole.UserRole, supplier_id)
                        detail_item.setToolTip("Click ƒë·ªÉ xem chi ti·∫øt nh√† cung c·∫•p")
                        self.tableWidget.setItem(row_idx, col_idx, detail_item)
        except Exception as e:
            print("L·ªói khi t·∫£i d·ªØ li·ªáu:", e)
    def search_supplier(self):
        keyword = self.search_input.text().strip().lower()

        for row in range(self.tableWidget.rowCount()):
            name_item = self.tableWidget.item(row, 1)  # C·ªôt t√™n nh√† cung c·∫•p
            if name_item:
                name_text = name_item.text().lower()
                match = keyword in name_text
                self.tableWidget.setRowHidden(row, not match)

    def show_supplier_detail(self, supplier_id):
        detail_dialog = SupplierInformation_w(self.context, supplier_id)
        detail_dialog.exec()
    
    def handle_cell_click(self, row, column):
        if column == 1 or column == 4:
            item = self.tableWidget.item(row, column)
            if item is None:
                print("Item not found")
                return
            supplier_id = item.data(Qt.ItemDataRole.UserRole)
            if supplier_id:
                print(f"Opening details for supplier ID: {supplier_id}")
                self.show_supplier_detail(supplier_id)

    def goto_main(self):
        self.main_window = Main_w(self.context)
        self.main_window.show()
        self.hide()
class SupplierInformation_w(QDialog):
    def __init__(self, context, supplier_id):
        super(SupplierInformation_w, self).__init__()
        self.context = context
        self.supplier_id_value = supplier_id
        ui_path = os.path.join(current_dir, 'ui', 'supplier_information.ui')
        print(">>> supplier_information.ui' path:", ui_path)
        if not os.path.exists(ui_path):
            raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y UI file: {ui_path}")
        uic.loadUi(ui_path, self)
        self.setWindowTitle("Supplier Management")
        self.setWindowIcon(QtGui.QIcon(icon_path))
        self.edit_mode = False
        self.pushButton.clicked.connect(self.toggle_edit_mode)

        self.load_supplier_data(self.supplier_id_value)
        

    def load_supplier_data(self, supplier_id_value):
        try:
            db = self.context.db_manager
            sql = """SELECT supplier_id, supplier_name, supplier_address,
                            contact_name, contact_phone, contact_email, payment_terms 
                        FROM supplier WHERE supplier_id = %s"""
            db.execute(sql, (supplier_id_value,))
            result = db.fetchone()

            if result:
                self.supplier_id.setText(str(result[0]))
                self.supplier_id.setReadOnly(True)
                self.supplier_name.setText(result[1] if result[1] else "")
                self.supplier_name.setReadOnly(True)
                self.supplier_address.setPlainText(result[2] if result[2] else "")
                self.supplier_address.setReadOnly(True)
                self.contact_name.setText(result[3] if result[3] else "")
                self.contact_name.setReadOnly(True)
                self.contact_phone.setText(result[4] if result[4] else "")
                self.contact_phone.setReadOnly(True)
                self.contact_email.setText(result[5] if result[5] else "")
                self.contact_email.setReadOnly(True)
                if result[6]:
                    self.comboBox_payment_terms.setCurrentText(result[6])
                    self.comboBox_payment_terms.setEnabled(False)
            else:
                QMessageBox.warning(self, "Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√† cung c·∫•p.")
        except Exception as e:
            print("L·ªói khi t·∫£i d·ªØ li·ªáu chi ti·∫øt:", e)
    def toggle_edit_mode(self):
        self.edit_mode = not self.edit_mode

        self.supplier_name.setReadOnly(not self.edit_mode)
        self.supplier_address.setReadOnly(not self.edit_mode)
        self.contact_name.setReadOnly(not self.edit_mode)
        self.contact_phone.setReadOnly(not self.edit_mode)
        self.contact_email.setReadOnly(not self.edit_mode)
        self.comboBox_payment_terms.setEnabled(self.edit_mode)
        self.pushButton.setText("üíæ Save" if self.edit_mode else "Edit...")
        if self.edit_mode:
            self.buttonBox.setStandardButtons(QDialogButtonBox.StandardButton.Cancel)
            # ‚úÖ L∆∞u d·ªØ li·ªáu ban ƒë·∫ßu
            self.original_data = {
                "name": self.supplier_name.text(),
                "address": self.supplier_address.toPlainText(),
                "contact": self.contact_name.text(),
                "phone": self.contact_phone.text(),
                "email": self.contact_email.text(),
                "payment": self.comboBox_payment_terms.currentText()
                }
            cancel_btn = self.buttonBox.button(QDialogButtonBox.StandardButton.Cancel)
            if cancel_btn:
                try:
                    cancel_btn.clicked.disconnect()
                except:
                    pass
                cancel_btn.clicked.connect(self.cancel_edit)
        else:
            self.save_supplier_data()
            self.buttonBox.setStandardButtons(QDialogButtonBox.StandardButton.Ok)


    def set_fields_editable(self, editable):
        self.supplier_id.setReadOnly(True)
        self.supplier_name.setReadOnly(not editable)
        self.supplier_address.setReadOnly(not editable)
        self.contact_name.setReadOnly(not editable)
        self.contact_phone.setReadOnly(not editable)
        self.contact_email.setReadOnly(not editable)
        self.comboBox_payment_terms.setEnabled(editable)

    def save_supplier_data(self):
        try:
            db = self.context.db_manager

            # L·∫•y gi√° tr·ªã payment, n·∫øu r·ªóng ‚Üí g√°n "COD"
            payment = self.comboBox_payment_terms.currentText().strip()
            if not payment:
                payment = "COD"

            sql = """
                UPDATE supplier SET
                    supplier_name = %s,
                    supplier_address = %s,
                    contact_name = %s,
                    contact_phone = %s,
                    contact_email = %s,
                    payment_terms = %s
                WHERE supplier_id = %s
            """
            values = (
                self.supplier_name.text(),
                self.supplier_address.toPlainText(),
                self.contact_name.text(),
                self.contact_phone.text(),
                self.contact_email.text(),
                payment,
                self.supplier_id.text()
            )

            db.execute(sql, values)
            db.commit()
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u th√¥ng tin nh√† cung c·∫•p.")

        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u: {e}")

    def cancel_edit(self):
        if self.edit_mode:
            # Kh√¥i ph·ª•c l·∫°i d·ªØ li·ªáu
            self.supplier_name.setText(self.original_data["name"])
            self.supplier_address.setPlainText(self.original_data["address"])
            self.contact_name.setText(self.original_data["contact"])
            self.contact_phone.setText(self.original_data["phone"])
            self.contact_email.setText(self.original_data["email"])
           
            idx = self.comboBox_payment_terms.findText(self.original_data["payment"])
            if idx >= 0:
                self.comboBox_payment_terms.setCurrentIndex(idx)
            self.edit_mode = False
            self.supplier_name.setReadOnly(True)
            self.supplier_address.setReadOnly(True)
            self.contact_name.setReadOnly(True)
            self.contact_phone.setReadOnly(True)
            self.contact_email.setReadOnly(True)
            self.comboBox_payment_terms.setEnabled(False)
            self.pushButton.setText("Edit...")
            self.buttonBox.setStandardButtons(QDialogButtonBox.StandardButton.Close)
            QMessageBox.information(self, "H·ªßy ch·ªânh s·ª≠a", "Thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c h·ªßy.")
# Program entry point
if __name__ == '__main__':
    # Set up paths
    current_dir = os.path.dirname(os.path.abspath(__file__))
    icon_dir = os.path.join(current_dir, "icon")
    icon_file = "app_icon_dark.png" if darkdetect.isDark() else "app_icon_light.png"
    icon_path = os.path.join(icon_dir, icon_file)

    # Initialize application
    context = AppContext()
    app = QApplication(sys.argv)
    medicine_window = Supplier_w(context)
    medicine_window.show()

    # Run application
    sys.exit(app.exec())